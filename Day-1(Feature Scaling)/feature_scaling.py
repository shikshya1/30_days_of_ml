# -*- coding: utf-8 -*-
"""Feature Scaling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mXTdHmLnY2n4IYaJ5Orj90Hr7Kgf3mL4
"""

from sklearn.datasets import load_breast_cancer
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt

features, target = load_breast_cancer(return_X_y=True)
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.3, random_state=42)

"""### Using Standard Scaler (Scikit-Learn)"""

std_scaler = StandardScaler()
X_train_standardized_scaled = std_scaler.fit_transform(X_train)
X_test_standardized_scaled = std_scaler.transform(X_test)

"""### Using Min-max Scaler (Scikit-Learn)"""

min_scaler = MinMaxScaler()
X_train_minmax_scaled = min_scaler.fit_transform(X_train)
X_train_minmax_scaled = min_scaler.transform(X_test)

"""### Batch Normalization

"""

import tensorflow as tf
from tensorflow import keras

mnist= keras.datasets.mnist

(X_train_full, y_train_full),(X_test, y_test) = mnist.load_data()

plt.imshow(X_train[12])

"""#### without Batch normalization, we usually scale the pixels by dividing it with 255"""

X_val, X_train = X_train_full[:5000]/255, X_train_full[5000:]/255

y_valid, y_train = y_train_full[:5000], y_train_full[5000:]

X_test= X_test/255

model = keras.models.Sequential([
    keras.layers.Flatten(input_shape=[28,28]),
    keras.layers.BatchNormalization(),
    keras.layers.Dense(300, activation='relu'),
    keras.layers.BatchNormalization(),
    keras.layers.Dense(100, activation='relu'),
    keras.layers.BatchNormalization(),
    keras.layers.Dense(10, activation='softmax'),
])

# alternative

model = keras.models.Sequential([
    keras.layers.Flatten(input_shape=[28,28]),
    keras.layers.BatchNormalization(),
    keras.layers.Dense(300),
    keras.layers.BatchNormalization(),
    keras.layers.Activation('relu'),
    keras.layers.Dense(100),
    keras.layers.BatchNormalization(),
    keras.layers.Activation('relu'),
    keras.layers.Dense(10, activation='softmax'),
])

